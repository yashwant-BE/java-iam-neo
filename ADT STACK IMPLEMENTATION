import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxSize = scanner.nextInt();
        Stack<Integer> stack = new ArrayStack<>(maxSize);

        while (true) {
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    int element = scanner.nextInt();
                    try {
                        stack.push(element);
                        System.out.println("Element " + element + " pushed to stack");
                    } catch (StackOverflowException e) {
                        System.out.println("Error: Stack is full");
                    }
                    break;
                case 2:
                    try {
                        int poppedElement = stack.pop();
                        System.out.println("Element " + poppedElement + " popped from stack");
                    } catch (StackUnderflowException e) {
                        System.out.println("Error: Stack is empty");
                    }
                    break;
                case 3:
                    try {
                        int peekedElement = stack.peek();
                        System.out.println("Element at top of stack is " + peekedElement);
                    } catch (StackUnderflowException e) {
                        System.out.println("Error: Stack is empty");
                    }
                    break;
                case 4:
                    int size = stack.size();
                    System.out.println("Stack size is " + size);
                    break;
                case 5:
                    boolean isEmpty = stack.isEmpty();
                    if (isEmpty) {
                        System.out.println("Stack is empty");
                    } else {
                        System.out.println("Stack is not empty");
                    }
                    break;
                case 6:
                    boolean isFull = stack.isFull();
                    if (isFull) {
                        System.out.println("Stack is full");
                    } else {
                        System.out.println("Stack is not full");
                    }
                    break;
                case 7:
                    System.out.println("Exiting program...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }

            System.out.println();
        }
    }
}

interface Stack<T> {
    void push(T element) throws StackOverflowException;
    T pop() throws StackUnderflowException;
    T peek() throws StackUnderflowException;
    boolean isEmpty();
    boolean isFull();
    int size();
}

class ArrayStack<T> implements Stack<T> {
    private int maxSize;
    private T[] stackArray;
    private int top;

    @SuppressWarnings("unchecked")
    public ArrayStack(int maxSize) {
        this.maxSize = maxSize;
        this.stackArray = (T[]) new Object[maxSize];
        this.top = -1;
    }

    public void push(T element) throws StackOverflowException {
        if (isFull()) {
            throw new StackOverflowException();
        }
        top++;
        stackArray[top] = element;
    }

    public T pop() throws StackUnderflowException {
        if (isEmpty()) {
            throw new StackUnderflowException();
        }
        T element = stackArray[top];
        stackArray[top] = null;
        top--;
        return element;
    }

    public T peek() throws StackUnderflowException {
        if (isEmpty()) {
                throw new StackUnderflowException();
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return (top == -1);
    }   

    public boolean isFull() {
        return (top == maxSize - 1);
    }

    public int size() {
        return top + 1;
    }
}

class StackOverflowException extends Exception {
    private static final long serialVersionUID = 1L;
}

class StackUnderflowException extends Exception {
    private static final long serialVersionUID = 1L;
}
